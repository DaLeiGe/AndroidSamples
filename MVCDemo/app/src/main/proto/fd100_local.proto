syntax = "proto3";

// proto 文件包名
package js1;

import "jt_s1_sys.proto";

/***********************************************************************
* 类型定义
***********************************************************************/

/*********************************************
* 描述：能量类型定义
*********************************************/
enum EnergyType {
	ENERGY_TYPE_LOAD = 0;		//负载
	ENERGY_TYPE_GRID = 1;		//电网
	ENERGY_TYPE_SOLAR = 2;		//太阳能
	ENERGY_TYPE_BP = 3;			//电池
};

/***********************************************************************
* 协议定义。EMS能量调度
***********************************************************************/

/*********************************************
* 描述：获取模块最大充放电能力
* 指令集：cmd.EMS_CMD_SETS
* 指令ID: cmd.EMS_CMD_ID_MODULE_CHG_DSG_MAX_GET

* 方    向：EMS --> ALL
* 行    为：EMS主动查询，广播
* 触发条件：定时触发，1S
* 是否应答：需应答
* 工作流程：
	EMS定时查询各模块的最大充放电能力。各模块需将当前工作条件下的最大充放电能力返回给EMS
*********************************************/
message ModuleChgDsgMaxGet {
};

message ModuleChgDsgMaxAck {
	EnergyType			module_energy_type = 1;	//能量类型
	float				module_chg_max_pwr = 2;	//充电能力(单位W)。若无充电能力（如太阳能），则填0.
	float				module_dsg_max_pwr = 3;	//放电能力(单位W)。若无放电能力（如负载），则填0.
};

/*********************************************
* 描述：各模块功率调整
* 指令集：cmd.EMS_CMD_SETS
* 指令ID: cmd.EMS_CMD_ID_MODULE_CHG_DSG_PWR_SET

* 方    向：EMS --> ALL
* 行    为：EMS下发
* 触发条件：能量未达到平衡时下发
* 是否应答：无需应答
* 工作流程：

* 备注：
	EMS对各个功率模块设置
*********************************************/
message ModuleChgDsgPwrSet {
	float				module_chg_dsg_pwr = 1;			//充放电功率大小。大于0表示发电功率（或放电功率）；小于0表示用电功率（或充电功率）；
};

/***********************************************************************
* 类型定义
***********************************************************************/

/***********************************************************************
* 内部协议定义。EMS
***********************************************************************/

/*********************************************
* 描述：内部状态定时同步
* 指令集：cmd.EMS_CMD_SETS
* 指令ID: cmd.EMS_CMD_ID_STA_SYNC

* 方    向：EMS --> ALL
* 行    为：EMS主动下发，广播
* 触发条件：定时触发（1S一次）
* 是否应答：无需应答
* 工作流程：
	
*********************************************/
message EmsStaSync {
	bool					sys_epo_sta	= 1;				//EPO状态：flase: 正常；true: EPO按下；
	uint32					sys_grid_sta = 2;				//电网状态：0-并网；1-离网
};

/***********************************************************************
* 协议定义：BP
***********************************************************************/

/*********************************************
* 描述：心跳包
* 指令集：cmd.BP_CMD_SETS
* 指令ID: cmd.BP_CMD_ID_HEARTBEAT

* 方    向：BP --> EMS
* 行    为：BP主动上报
* 触发条件：定时触发，1S
* 是否应答：无需应答
* 工作流程：
*********************************************/
message BpHeartbeat {
	float					bp_pwr = 1;				//电池组功率。充电为正；放电为负。
	uint32					bp_soc = 2;				//电池包soc
	sys.RunStaDef			bp_run_sta = 3;			//运行状态
	optional float			bp_vol = 4;				//电池包电压
	optional float			bp_amp = 5;				//电池包电流
	optional uint32			bp_soh = 6;				//电池包soh
};

/*********************************************
* 描述：运行状态控制
* 指令集：cmd.BP_CMD_SETS
* 指令ID: cmd.BP_CMD_ID_RUN_STA_SET

* 方    向：EMS --> BP
* 行    为：EMS下发
* 触发条件：单次触发
* 是否应答：需应答
* 工作流程：

* 备    注：
*********************************************/
message BpRunStateSet {
	sys.RunStaDef			bp_run_sta = 1;			//运行状态
	uint32					sys_grid_sta = 2;		//电网状态：0-并网；1-离网
};

message BpRunStateSetAck {
	sint32		result = 1;			//应答。0：收到指令。
};

/***********************************************************************
* 内部协议定义。PCS
***********************************************************************/

/*********************************************
* 描述：PCS心跳包
* 指令集：cmd.PCS_CMD_SETS
* 指令ID: cmd.PCS_CMD_ID_HEARTBEAT

* 方    向：PCS --> EMS
* 行    为：EMS主动广播
* 触发条件：定时触发（1S一次）
* 是否应答：无需应答
* 工作流程：
	
*********************************************/
message PCSHeartbeat {
	float				pcs_act_pwr = 1;			//有功功率
	uint32				pcs_ac_freq = 2;			//交流频率
	uint32				sys_grid_sta = 3;			//电网状态：0-并网；1-离网
	sys.RunStaDef		pcs_run_sta = 4;			//运行状态
	optional sys.PhaseInfo	pcs_a_phase = 5;		//A相
	optional sys.PhaseInfo	pcs_b_phase = 6;		//B相
	optional sys.PhaseInfo	pcs_c_phase = 7;		//C相
};

/*********************************************
* 描述：离网/并网事件通知
* 指令集：cmd.PCS_CMD_SETS
* 指令ID: cmd.PCS_CMD_ID_GRID_STA_SYNC

* 方    向：PCS --> ALL
* 行    为：离网/并网事件发生后，发送。
* 触发条件：事件发生后，每隔100ms发送一次，发3次后停止。
* 是否应答：无需应答
* 工作流程：
*
* 备    注：
	暂定这样，调完后再根据实际情况调整
*********************************************/
message PCSGridStatSync {
	uint32				sys_grid_sta = 1;			//电网状态：0-并网；1-离网
};

/*********************************************
* 描述：PCS继电器控制
* 指令集：cmd.PCS_CMD_SETS
* 指令ID: cmd.PCS_CMD_ID_RLY_STA_SET

* 方    向：PCS --> EMS
* 行    为：
* 触发条件：PCS需要控制继电器时发送
* 是否应答：需应答
* 工作流程：
*
* 备    注：
	暂定这样，调完后再根据实际情况调整
*********************************************/
message PCSRelaySet {
	uint32				pcs_n_rly_sta = 1;			//n线：1：闭合；0：断开
	uint32				pcs_r_rly_sta = 2;			//r线：1：闭合；0：断开
	uint32				pcs_s_rly_sta = 3;			//s线：1：闭合；0：断开
	uint32				pcs_t_rly_sta = 4;			//t线：1：闭合；0：断开
};

message PCSRelaySetAck {
	sint32				result = 1;			//应答。0：收到指令。
};

/***********************************************************************
* 内部协议定义。MPPT
***********************************************************************/

/*********************************************
* 描述：mppt心跳包
* 指令集：cmd.MPPT_CMD_SETS
* 指令ID: cmd.MPPT_CMD_ID_HEARTBEAT

* 方    向：mppt --> EMS
* 行    为：mppt主动上报
* 触发条件：定时触发（1S一次）
* 是否应答：无需应答
* 工作流程：
	
*********************************************/
message MpptHeartbeat {
	repeated sys.MpptPVInfo mppt_pv = 1;			//pv信息
	sys.RunStaDef			mppt_run_sta = 2;		//运行状态
};

/***********************************************************************
* 内部协议定义。在位心跳包
***********************************************************************/
/*********************************************
* 描述：在位心跳包
* 指令集：cmd.IOT_CMD_SETS
* 指令ID: cmd.IOT_CMD_ID_ONLINE_HEARTBEAT

* 方    向：ALL --> IOT
* 行    为：
* 触发条件：定时触发（1S一次）
* 是否应答：无需应答
* 工作流程：
	所有模块，无论在loader或是APL中，向IOT报告在位状态。IOT据此知道模块信息
*********************************************/
message OnLineHeartbeat {
	string				module_sn = 1;							//SN号，16位
	uint32				module_product_info = 2;				//产品信息，大类和细类。（product_type<<8）|（product_detail）
	uint32				module_program_sta = 3;					//当前固件类型。0：loader; 1: apl
	optional uint32		module_apl_sw_ver = 4;					//在apl中时，此段必选。(APP_MAIN_VER<<24) | (APP_SUB_VER<<16) | (APP_DBG_VER <<8) | (APP_TEST_VER)
	optional uint32		module_loader_sw_ver = 5;				//在loader中时，此段必选。(LOADER_MAIN_VER<<24) | (LOADER_SUB_VER<<16) | (LOADER_DBG_VER <<8) | (LOADER_TEST_VER)
};

/*********************************************
* 描述：连接状态
* 指令集：cmd.IOT_CMD_SETS
* 指令ID: cmd.IOT_CMD_ID_IOT_CONNECT_STA_SYNC

* 方    向：IOT --> ALL
* 行    为：
* 触发条件：定时触发（1S一次）
* 是否应答：无需应答
* 工作流程：
	IOT与App建立直联或断开后（内网、蓝牙或都有），更新连接状态、时间戳，并报告设备端。一台以及一台以上手机建立直联时，连接状态为已连接，并更新一次时间戳。每掉线一台手机时，也更新时间戳。所有手机直联全部掉线，连接状态更改为无连接。
	IOT与Server建立直联或断开后,更新连接状态、时间戳，并报告设备端。
*********************************************/
message IotConnectInfo
{
	uint32				app_connect_sta = 1;		//手机APP直联状态；0：无连接；1：已连接
	uint32				app_connect_timestamp = 2;	//手机APP直联时间戳；每次与App建立连接后更新
	uint32				cloud_connect_sta = 3;		//与iot服务器连接状态；0：无连接；1：已连接
	uint32				cloud_connect_timestamp = 4;	//与iot服务器连接时间戳；每次与IOT服务器建立连接后更新
};

