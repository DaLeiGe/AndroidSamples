apply plugin: 'com.android.application'

//println("hello wrold")
//println "hell Gradle"
println "$rootProject.ext.username"
println "${username}"

//复值与引用
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies
def url = rootProject.ext.url

android {
    compileSdkVersion androidId.compileSdkVersion
    defaultConfig {
        applicationId appId.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //开启分包
        multiDexEnabled true
        //设置分包配置
        //multiDexKeepFile file('multidex-config.txt')

        //将svg图片生成 指定维度的png图片
        //vectorDrawables.generatedDensities('xhdpi','xxhdpi')
        //使用support-v7兼容（5.0版本以上）
        vectorDrawables.useSupportLibrary = true
        //只保留指定和默认资源
        resConfig('zh-rCH')

        //配置so库CPU架构（真机：arm,模拟器：x86）
        // x86 x86_64 mips mips64
        ndk {
            //真机
            //abiFilters('armeabi', 'armeabi-v7')
            //为了模拟器启动
            abiFilters('x86', 'x86_64')
        }

        //源集 - 设置源集的属性，更改源集的Java目录或者自由目录等
        sourceSets {
            main {
                if (!isRelease) {
                    // 如果是组件化模式，需要单独运行时
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java.srcDirs = ['src/main/java']
                    res.srcDirs = ['src/main/res']
                    resources.srcDirs = ['src/main/resources']
                    aidl.srcDirs = ['src/main/aidl']
                    assets.srcDirs = ['src/main/assets']
                } else {
                    //集成化模式，整个项目打包
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }
    }

    //签名配置（隐形坑：必须写在buildTypes之前）
    signingConfigs {
        debug {
            //windows系统默认debug签名证书存储路径
            //storeFile file("C://Users/Administrator/.android/debug.keystore")
            //Mac系统默认debug签名证书存储路径
            //storeFile file("~/.android/debug.keystore")
            //storePassword "android"
            //keyAlias "androiddebugkey"
            //keyPassword "android"
            storeFile file("../netease.jks")
            storeType "netease"
            storePassword "net163"
            keyAlias "netease"
            keyPassword "net163"
        }
        release {
            //签名证书文件
            storeFile file("../netease.jks")
            //签名证书的类型
            storeType "netease"
            //签名证书文件的密码
            storePassword "net163"
            //签名证书中密码别名
            keyAlias "netease"
            //签名证书中该秘钥的密码
            keyPassword "net163"
            //是否开启v2打包
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            buildConfigField("String",  "debug", "\"${url.debug}\"")
        }

        release {
            minifyEnabled false
            buildConfigField("String", "debug", "\"${url.release}\"")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //adbOptions:可以对adb操作选项添加配置
    adbOptions {
        //配置操作超时时间，单位毫秒
        timeOutInMs = 5 * 1000_0
        //adb install 命令的选项配置
        installOptions '-r', '-s'
    }

    //对 dx 操作配置，接受一个DexOptions类型的闭包，配置由DexOptions提供
    dexOptions {
        //配置执行dx命令是为其分配的最大推内存
        javaMaxHeapSize "4g"
        //配置是否执行dex Library工程，开启后会提高增量构建速度，不会影响clean构建速度，默认true
        preDexLibraries = false
        //配置是否开启jumbo模式，代码方法超过65535需要强制开启才能构建成功
        jumboMode true
        //配置Gradle运行dx命令时使用的线程数量
        threadCount 8
        additionalParameters = [
                '--multi-dex',//多dex分包
                '--set-max-idx-number=50000',//每个包内方法数上限
                // '--main-dex-list=' + '/multidex-config.txt',// 打包到主classes.dex的文件列表
                '--minimal-main-dex'
        ]
    }

    //执行 gradle lint 命令即可运行 lint 检查，默认生成的报告在 outputs/lint-results.html中
    lintOptions {
        //遇到lint检查错误会终止构建，一般设置为false
        abortOnError false
        //将警告当做错误来处理（老版本：warningAsErrors）
        warningsAsErrors false
        //检查新的API
        check 'NewApi'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //标准写法
    //implementation group: 'com.android.support', name: 'appcompat-v7', version: '28.0.0'
    //简写
    //implementation 'com.android.support:appcompat-v7:28.0.0'
    //使用自己配置config.gradle写法
    //implementation support.appcompat
    //implementation support.recyclerview
    //implementation support.constraint
    //最简洁的方式.each循环依赖
    support.each { k, v -> implementation v }
}
